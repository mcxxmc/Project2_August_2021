// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package middlewareGRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareGRPCClient is the client API for MiddlewareGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareGRPCClient interface {
	MiddlewareOpenCVCollector(ctx context.Context, in *ImageInfo, opts ...grpc.CallOption) (*Empty, error)
}

type middlewareGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareGRPCClient(cc grpc.ClientConnInterface) MiddlewareGRPCClient {
	return &middlewareGRPCClient{cc}
}

func (c *middlewareGRPCClient) MiddlewareOpenCVCollector(ctx context.Context, in *ImageInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/middlewareGRPC/middlewareOpenCVCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareGRPCServer is the server API for MiddlewareGRPC service.
// All implementations must embed UnimplementedMiddlewareGRPCServer
// for forward compatibility
type MiddlewareGRPCServer interface {
	MiddlewareOpenCVCollector(context.Context, *ImageInfo) (*Empty, error)
	mustEmbedUnimplementedMiddlewareGRPCServer()
}

// UnimplementedMiddlewareGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareGRPCServer struct {
}

func (UnimplementedMiddlewareGRPCServer) MiddlewareOpenCVCollector(context.Context, *ImageInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiddlewareOpenCVCollector not implemented")
}
func (UnimplementedMiddlewareGRPCServer) mustEmbedUnimplementedMiddlewareGRPCServer() {}

// UnsafeMiddlewareGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareGRPCServer will
// result in compilation errors.
type UnsafeMiddlewareGRPCServer interface {
	mustEmbedUnimplementedMiddlewareGRPCServer()
}

func RegisterMiddlewareGRPCServer(s grpc.ServiceRegistrar, srv MiddlewareGRPCServer) {
	s.RegisterService(&MiddlewareGRPC_ServiceDesc, srv)
}

func _MiddlewareGRPC_MiddlewareOpenCVCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareGRPCServer).MiddlewareOpenCVCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middlewareGRPC/middlewareOpenCVCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareGRPCServer).MiddlewareOpenCVCollector(ctx, req.(*ImageInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// MiddlewareGRPC_ServiceDesc is the grpc.ServiceDesc for MiddlewareGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiddlewareGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "middlewareGRPC",
	HandlerType: (*MiddlewareGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "middlewareOpenCVCollector",
			Handler:    _MiddlewareGRPC_MiddlewareOpenCVCollector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "middlewareGRPC.proto",
}
