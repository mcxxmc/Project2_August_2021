// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gRPCHandler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCHandlerClient is the client API for GRPCHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCHandlerClient interface {
	GRPCHandlerOpenCVCollector(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImageInfo, error)
}

type gRPCHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCHandlerClient(cc grpc.ClientConnInterface) GRPCHandlerClient {
	return &gRPCHandlerClient{cc}
}

func (c *gRPCHandlerClient) GRPCHandlerOpenCVCollector(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ImageInfo, error) {
	out := new(ImageInfo)
	err := c.cc.Invoke(ctx, "/gRPCHandler/gRPCHandlerOpenCVCollector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCHandlerServer is the server API for GRPCHandler service.
// All implementations must embed UnimplementedGRPCHandlerServer
// for forward compatibility
type GRPCHandlerServer interface {
	GRPCHandlerOpenCVCollector(context.Context, *Empty) (*ImageInfo, error)
	mustEmbedUnimplementedGRPCHandlerServer()
}

// UnimplementedGRPCHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCHandlerServer struct {
}

func (UnimplementedGRPCHandlerServer) GRPCHandlerOpenCVCollector(context.Context, *Empty) (*ImageInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCHandlerOpenCVCollector not implemented")
}
func (UnimplementedGRPCHandlerServer) mustEmbedUnimplementedGRPCHandlerServer() {}

// UnsafeGRPCHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCHandlerServer will
// result in compilation errors.
type UnsafeGRPCHandlerServer interface {
	mustEmbedUnimplementedGRPCHandlerServer()
}

func RegisterGRPCHandlerServer(s grpc.ServiceRegistrar, srv GRPCHandlerServer) {
	s.RegisterService(&GRPCHandler_ServiceDesc, srv)
}

func _GRPCHandler_GRPCHandlerOpenCVCollector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCHandlerServer).GRPCHandlerOpenCVCollector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPCHandler/gRPCHandlerOpenCVCollector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCHandlerServer).GRPCHandlerOpenCVCollector(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCHandler_ServiceDesc is the grpc.ServiceDesc for GRPCHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPCHandler",
	HandlerType: (*GRPCHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "gRPCHandlerOpenCVCollector",
			Handler:    _GRPCHandler_GRPCHandlerOpenCVCollector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPCHandler.proto",
}
