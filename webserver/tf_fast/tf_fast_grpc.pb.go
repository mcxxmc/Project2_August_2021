// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tf_fast

import (
	tf "webserver/tf"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImmediatePredictorClient is the client API for ImmediatePredictor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImmediatePredictorClient interface {
	ImmediatePred(ctx context.Context, in *tf.Image, opts ...grpc.CallOption) (*tf.Prediction, error)
}

type immediatePredictorClient struct {
	cc grpc.ClientConnInterface
}

func NewImmediatePredictorClient(cc grpc.ClientConnInterface) ImmediatePredictorClient {
	return &immediatePredictorClient{cc}
}

func (c *immediatePredictorClient) ImmediatePred(ctx context.Context, in *tf.Image, opts ...grpc.CallOption) (*tf.Prediction, error) {
	out := new(tf.Prediction)
	err := c.cc.Invoke(ctx, "/ImmediatePredictor/ImmediatePred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImmediatePredictorServer is the server API for ImmediatePredictor service.
// All implementations must embed UnimplementedImmediatePredictorServer
// for forward compatibility
type ImmediatePredictorServer interface {
	ImmediatePred(context.Context, *tf.Image) (*tf.Prediction, error)
	mustEmbedUnimplementedImmediatePredictorServer()
}

// UnimplementedImmediatePredictorServer must be embedded to have forward compatible implementations.
type UnimplementedImmediatePredictorServer struct {
}

func (UnimplementedImmediatePredictorServer) ImmediatePred(context.Context, *tf.Image) (*tf.Prediction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImmediatePred not implemented")
}
func (UnimplementedImmediatePredictorServer) mustEmbedUnimplementedImmediatePredictorServer() {}

// UnsafeImmediatePredictorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImmediatePredictorServer will
// result in compilation errors.
type UnsafeImmediatePredictorServer interface {
	mustEmbedUnimplementedImmediatePredictorServer()
}

func RegisterImmediatePredictorServer(s grpc.ServiceRegistrar, srv ImmediatePredictorServer) {
	s.RegisterService(&ImmediatePredictor_ServiceDesc, srv)
}

func _ImmediatePredictor_ImmediatePred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tf.Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImmediatePredictorServer).ImmediatePred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ImmediatePredictor/ImmediatePred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImmediatePredictorServer).ImmediatePred(ctx, req.(*tf.Image))
	}
	return interceptor(ctx, in, info, handler)
}

// ImmediatePredictor_ServiceDesc is the grpc.ServiceDesc for ImmediatePredictor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImmediatePredictor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ImmediatePredictor",
	HandlerType: (*ImmediatePredictorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImmediatePred",
			Handler:    _ImmediatePredictor_ImmediatePred_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tf_fast.proto",
}
